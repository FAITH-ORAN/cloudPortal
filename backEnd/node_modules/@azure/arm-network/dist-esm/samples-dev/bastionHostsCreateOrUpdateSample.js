/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates the specified Bastion Host.
 *
 * @summary Creates or updates the specified Bastion Host.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2023-09-01/examples/BastionHostPut.json
 */
function createBastionHost() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const bastionHostName = "bastionhosttenant";
        const parameters = {
            ipConfigurations: [
                {
                    name: "bastionHostIpConfiguration",
                    publicIPAddress: {
                        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    subnet: {
                        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet",
                    },
                },
            ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.bastionHosts.beginCreateOrUpdateAndWait(resourceGroupName, bastionHostName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates the specified Bastion Host.
 *
 * @summary Creates or updates the specified Bastion Host.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2023-09-01/examples/BastionHostPutWithZones.json
 */
function createBastionHostWithZones() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const bastionHostName = "bastionhosttenant";
        const parameters = {
            ipConfigurations: [
                {
                    name: "bastionHostIpConfiguration",
                    publicIPAddress: {
                        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
                    },
                    subnet: {
                        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet",
                    },
                },
            ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.bastionHosts.beginCreateOrUpdateAndWait(resourceGroupName, bastionHostName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates the specified Bastion Host.
 *
 * @summary Creates or updates the specified Bastion Host.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2023-09-01/examples/BastionHostDeveloperPut.json
 */
function createDeveloperBastionHost() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg2";
        const bastionHostName = "bastionhostdeveloper";
        const parameters = {
            ipConfigurations: [],
            networkAcls: { ipRules: [{ addressPrefix: "1.1.1.1/16" }] },
            virtualNetwork: {
                id: "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet2",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.bastionHosts.beginCreateOrUpdateAndWait(resourceGroupName, bastionHostName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createBastionHost();
        createBastionHostWithZones();
        createDeveloperBastionHost();
    });
}
main().catch(console.error);
//# sourceMappingURL=bastionHostsCreateOrUpdateSample.js.map